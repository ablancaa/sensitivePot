@startuml
class Client {
  - dni: String
  - name: String
  + getAllWaitingForComponents(): List<Tuple<String, Integer>>
}

class Member {
  - memberNumber: Integer
  - affiliationYear: Integer
}

class ShoppingCart {
  - date: Date
  - hour: Integer
  + addComponent(component: Component, units: Integer)
  + getComponents(): List<ComponentInShoppingCart>
}

class ComponentInShoppingCart {
  - units: Integer
  + getComponent(): Component
}

abstract class Component {
  - name: String
  - description: String
  - price: Integer
  - state: ComponentState
  + getName(): String
  + getStock(): Integer
  + setStock(stock: Integer)
  + changeState(state: ComponentState)
  + getState(): ComponentState
}

interface ComponentState {
  + addToWaitingList(component: Component, units: Integer)
}

class AvailableState implements ComponentState {
  + addToWaitingList(component: Component, units: Integer)
}

class WaitingState implements ComponentState {
  + addToWaitingList(component: Component, units: Integer)
}

class SoldState implements ComponentState {
  + addToWaitingList(component: Component, units: Integer)
}

class CompositeComponent extends Component {
  + addComponent(component: Component)
  + removeComponent(component: Component)
  + getChildComponents(): List<Component>
}

class LeafComponent extends Component {
}

Client "1" -- "*" ShoppingCart: Purchases
Client "*" -- "*" Component: isInterestedIn
ShoppingCart "1" -- "1..*" ComponentInShoppingCart : Has
Member --|> Client
Component "1"--"*"  ComponentInShoppingCart : isTypeOf
Component <|-- CompositeComponent
Component <|-- LeafComponent
Component o-- ComponentState : has
ComponentState <|.. AvailableState
ComponentState <|.. WaitingState
ComponentState <|.. SoldState
@enduml

